=================================================================
                  Remote Ocean Probe - REST API
=================================================================

1. PROJECT OVERVIEW
--------------------
This project is a Spring Boot REST API that allows remote control of an
ocean probe navigating the seabed. The probe can:
- Move forwards and backwards.
- Rotate left and right.
- Stay within the defined grid.
- Avoid obstacles.
- Keep track of visited coordinates.

=================================================================

2. TECHNOLOGIES USED
--------------------
- Java 17+
- Spring Boot 3+
- Maven
- JUnit 5
- Mockito (for unit testing)

=================================================================

3. API ENDPOINTS
-----------------

3.1 Initialize Probe
---------------------
- URL: /api/probe/initialize
- Method: POST
- Request Body (JSON):
  {
    "x": 2,
    "y": 2,
    "direction": "NORTH"
  }
- Response:
  "Probe initialized at (2,2) facing NORTH"

------------------------------------------------------------

3.2 Move Probe
--------------
- URL: /api/probe/move
- Method: POST
- Request Body (JSON):
  {
    "commands": "FFRFF"
  }
- Response:
  "(4,2) facing EAST"

- Command List:
  - F ‚Üí Move forward
  - B ‚Üí Move backward
  - L ‚Üí Turn left
  - R ‚Üí Turn right

------------------------------------------------------------

3.3 Get Visited Coordinates
---------------------------
- URL: /api/probe/visited
- Method: GET
- Response:
  ["2,2", "2,1", "3,1", "4,1", "4,2"]

=================================================================

4. SETUP & RUN INSTRUCTIONS
---------------------------

4.1 Prerequisites
-----------------
Ensure you have installed:
- Java 17+
- Maven (to build and run the project)

4.2 Build & Run
---------------
Run the following commands:
$ mvn clean install
$ mvn spring-boot:run

Once started, the API will be available at:
http://localhost:8080

4.3 Running Tests
-----------------
To run unit tests, execute:
$ mvn test

=================================================================

5. DESIGN CONSIDERATIONS
-------------------------
‚úÖ Clean Architecture - Follows domain-driven design principles
‚úÖ Single Responsibility Principle (SRP) - Separate concerns for maintainability
‚úÖ Encapsulation - Grid, Probe, and Movement logic are independent
‚úÖ Test-Driven Development (TDD) - Unit tests ensure correctness
‚úÖ Scalability - Can extend with additional sensors or commands

=================================================================

6. FUTURE ENHANCEMENTS
----------------------
- üåç Persistent Storage - Save probe history
- üì° WebSocket Integration - Real-time control
- üìç Advanced Obstacles - Variable terrain simulation

=================================================================

7. AUTHOR & CONTACT
-------------------
üöÄ Your Name
üìß Email: your.email@example.com
üíª GitHub: https://github.com/your-github-profile

=================================================================
